#+author: who4mos
#+title: My emacs config
#+property: header-args :tangle ~/.config/emacs/init.el
#+startup: overview

* Lexical Binding

Use [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Selecting-Lisp-Dialect.html][lexical binding]].

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Packages setup

Adds melpa to package archives and require [[https://github.com/jwiegley/use-package][use-package]].

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  (require 'use-package)
#+end_src

** Try packages!

[[http://github.com/larstvei/try][try]] allows you to /try/ emacs packages without installing them.

#+begin_src emacs-lisp
  (use-package try
    :ensure t
    :defer t)
#+end_src

** diminish

[[https://github.com/emacsmirror/diminish][diminish]] allows you to keep a mode working but not showing in the modeline.

#+begin_src emacs-lisp
  (use-package diminish
    :ensure t)
#+end_src

* Better defaults

Change startup screen.

#+begin_src emacs-lisp
  (setopt inhibit-startup-screen t)
  (setopt initial-scratch-message "")
#+end_src

Remove bars.

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

Enable column numbers on mode line, change the typing behaviour when a region is selected and remember recently opened files.

#+begin_src emacs-lisp
  (column-number-mode t)
  (delete-selection-mode t)
  (recentf-mode t)
#+end_src

Enable ~file-name-shadow-mode~.

#+begin_src emacs-lisp
  (file-name-shadow-mode t)
#+end_src

Always use tabs.

#+begin_src emacs-lisp
  (setopt indent-tabs-mode nil)
  (setopt tab-width 4)
#+end_src

* Beautifying

Set font.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Hack Nerd Font" :height 120)
#+end_src

Set theme.

#+begin_src emacs-lisp
  (use-package adwaita-dark-theme
    :ensure t
    :init
    (load-theme 'adwaita-dark t))
#+end_src

** nerd-icons

[[https://github.com/rainstormstudio/nerd-icons.el][nerd-icons]] allows you to use [[https://github.com/ryanoasis/nerd-fonts][nerd-fonts]] in emacs.

#+begin_src emacs-lisp
  (use-package nerd-icons
    :ensure t
    :custom
    (nerd-icons-font-family "Hack Nerd Font"))
#+end_src

[[https://github.com/rainstormstudio/nerd-icons-dired][nerd-icons-dired]] adds nerd icons to [[* Dired][dired]].

#+begin_src emacs-lisp
  (use-package nerd-icons-dired
    :ensure t
    :hook
    (dired-mode . nerd-icons-dired-mode))
#+end_src

[[https://github.com/rainstormstudio/nerd-icons-completion][nerd-icons-completion]] gives minibuffer completions nerd icons.

#+begin_src emacs-lisp
  (use-package nerd-icons-completion
    :ensure t
    :after marginalia
    :config
    (nerd-icons-completion-mode)
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+end_src

[[https://github.com/LuigiPiucco/nerd-icons-corfu][nerd-icons-corfu]] adds nerd icons to [[* Corfu][corfu]] completions.

#+begin_src emacs-lisp
  (use-package nerd-icons-corfu
    :ensure t
    :after corfu
    :init
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

[[https://github.com/seagle0128/nerd-icons-ibuffer][nerd-icons-ibuffer]] display nerd icons in ibuffer.

#+begin_src emacs-lisp
  (use-package nerd-icons-ibuffer
    :ensure t
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

** emojis

Set emoji font, can be used with ~cape-emoji~.

#+begin_src emacs-lisp
  (when (member "Noto Color Emoji" (font-family-list))
    (set-fontset-font
     t 'symbol (font-spec :family "Noto Color Emoji") nil 'prepend))
#+end_src

* Orgmode

#+begin_src emacs-lisp
  (use-package org
    :bind
    ("C-c l" . org-store-link)
    ("C-c a" . org-agenda)
    ("C-c c" . org-capture)
    :custom
    ;; agenda
    (org-directory "~/org/")
    (org-agenda-files (list org-directory))
    (org-log-done 'time)
    (org-log-into-drawer t)
    ;; tags
    (org-tags-column 0)
    (org-auto-align-tags nil)
    ;; archive
    (org-archive-location "~/org/archive/%s_archive::")
    ;; structural editing
    (org-special-ctrl-a/e t)
    (org-special-ctrl-k t)
    ;; style
    (org-hide-emphasis-markers t)
    ;; images
    (org-startup-with-inline-images t)
    (org-image-actual-width '(500))
    :hook
    (org-mode . visual-line-mode))

  (diminish 'visual-line-mode)
#+end_src

** olivetti

[[https://github.com/rnkn/olivetti][olivetti]] keeps text in the middle of the window.

#+begin_src emacs-lisp
  (use-package olivetti
    :ensure t
    :diminish
    :custom
    (olivetti-body-width 0.7)
    (olivetti-minimum-body-width 80)
    :hook
    (org-mode . olivetti-mode))
#+end_src

* Magit

[[https://github.com/magit/magit][magit]] is a git interface inside emacs.

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :commands (magit-status)
    :bind
    ("C-x g" . magit-status))
#+end_src

* Helpful Information

** Helpful

[[https://github.com/Wilfred/helpful][Helpful]] is an alternative to emacs built-in help commands that provides more information.

#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key)
    ([remap describe-command] . helpful-command)
    ([remap describe-symbol] . helpful-symbol))
#+end_src

** which-key

~which-key~ display key bindings following your current prefix command, it is now (emacs >= 30.1) built-in.

#+begin_src emacs-lisp
  (use-package which-key
    :diminish
    :config
    (which-key-mode))
#+end_src

* Dired

Set dired switches.

#+begin_src emacs-lisp
  (use-package dired
    :defer t
    :custom
    (dired-listing-switches "-lAFhv --group-directories-first"))
#+end_src

** dired-subtree

[[https://github.com/Fuco1/dired-hacks/?tab=readme-ov-file#dired-subtree][dired-subtree]] allows you to view the content of a directory without opening a separate buffer.

#+begin_src emacs-lisp
  (use-package dired-subtree
    :ensure t
    :after dired
    :bind (
  	 :map dired-mode-map
  	      ("<tab>" . dired-subtree-toggle)
  	      ("TAB" . dired-subtree-toggle)))
#+end_src

* Window Movement

Unbind default ~other-window~ and bind [[https://github.com/abo-abo/ace-window][ace-window]] to ~M-o~.

#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :bind
    ("C-x o" . nil)
    ("M-o" . ace-window))
#+end_src

* Ibuffer

#+begin_src emacs-lisp
  (use-package ibuffer
    :bind (
           ("C-x C-b" . ibuffer)
           :map ibuffer-mode-map
           ("M-o" . ace-window)))
#+end_src

* Navigation

[[https://github.com/abo-abo/avy][avy]] allows you to jump to visible text using a char decision tree.

#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :custom
    (avy-timeout-seconds 0.3)
    :bind
    ("M-s" . avy-goto-char-timer))
#+end_src

* Minibuffer

** Vertico

[[https://github.com/minad/vertico][Vertico]] provides a minimalist vertical completion UI based on the default completion system.

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))
#+end_src

*** Marginalia

[[https://github.com/minad/marginalia][Marginalia]] adds marginalia to minibuffer completions.

#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode))
#+end_src

* Consult

[[https://github.com/minad/consult][Consult]] provides search and navigation commands.

#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    :bind 
    ([remap switch-to-buffer] . consult-buffer)
    ([remap yank-pop] . consult-yank-pop)
    ([remap goto-line] . consult-goto-line)
    ([remap isearch-forward] . consult-line)
    ([remap imenu] . consult-imenu)
    ("C-c m" . consult-man)
    ("C-c i" . consult-info)
    ("M-g f" . consult-flymake))

  (use-package consult
    :after org
    :bind (
           :map org-mode-map
           ([remap imenu] . consult-org-heading)))
#+end_src

* Completion

** Completion style

[[https://github.com/oantolin/orderless][Orderless]] provides an *orderless* completion style. It divides the pattern in space separated components and match candidates that match those components in any order.

#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Corfu

[[https://github.com/minad/corfu][Corfu]] enhances in-buffer completion with a small popup.

#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    :custom
    (tab-always-indent 'complete)
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-auto-prefix 2)
    (corfu-popupinfo-delay '(1.25 . 0.5))
    (text-mode-ispell-word-completion nil)
    :init
    (global-corfu-mode)
    :config
    (corfu-popupinfo-mode t))
#+end_src

*** Cape

[[https://github.com/minad/cape][Cape]] provies Completion At Point Extensions.

#+begin_src emacs-lisp
  (use-package cape
    :ensure t
    :init
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block))
#+end_src

* Programming

Setup line numbers and electric pairing in prog modes.

#+begin_src emacs-lisp
  (use-package emacs
    :hook
    (prog-mode . display-line-numbers-mode)
    (prog-mode . electric-pair-mode))
#+end_src

** eglot

[[https://github.com/joaotavora/eglot][Eglot]] is the emacs client for the LSP.

#+begin_src emacs-lisp
  (use-package eglot
    :custom
    (completion-category-overrides '((eglot (styles orderless))
                                     (eglot-capf (styles orderless))))
    :config
    (add-to-list 'eglot-server-programs
  	           '((python-ts-mode) "pyright")
  	           '((c-ts-mode c++-ts-mode) "clangd"))
    (add-to-list 'eglot-server-programs
  	           '((js-ts-mode) "typescript-language-server" "--stdio"))
    (add-to-list 'eglot-server-programs
  	           '((html-ts-mode) "vscode-html-language-server" "--stdio"))
    (add-to-list 'eglot-server-programs
  	           '((css-ts-mode) "vscode-css-language-server" "--stdio"))
    :hook
    (python-ts-mode . eglot-ensure)
    (c-ts-mode . eglot-ensure)
    (c++-ts-mode . eglot-ensure)
    (html-ts-mode . eglot-ensure)
    (css-ts-mode . eglot-ensure)
    (js-ts-mode . eglot-ensure))
#+end_src

*** eglot-java


[[https://github.com/yveszoundi/eglot-java][eglot-java]] automatically sets up the Eclipse JDT language server.

#+begin_src emacs-lisp
  (use-package eglot-java
    :ensure t
    :hook
    (java-ts-mode . eglot-java-mode))
#+end_src

** tree-sitter

[[https://tree-sitter.github.io/tree-sitter/][Tree-sitter]] is a parser generator tool and incremental parser lib. Since version 29, emacs can be built with tree sitter support.

The snippet sets langugage grammars and major mode remaps for the langugages i use.

#+begin_src emacs-lisp
  (use-package treesit
    :custom
    (treesit-font-lock-level 4)
    
    (treesit-language-source-alist
     '((python "https://github.com/tree-sitter/tree-sitter-python")
       (c "https://github.com/tree-sitter/tree-sitter-c")
       (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
       (html "https://github.com/tree-sitter/tree-sitter-html")
       (css "https://github.com/tree-sitter/tree-sitter-css")
       (javascript "https://github.com/tree-sitter/tree-sitter-javascript")
       (java "https://github.com/tree-sitter/tree-sitter-java")))

    (major-mode-remap-alist
     '((python-mode . python-ts-mode)
       (c-mode . c-ts-mode)
       (c++-mode . c++-ts-mode)
       (html-mode . html-ts-mode)
       (mhtml-mode . html-ts-mode)
       (css-mode . css-ts-mode)
       (js-mode . js-ts-mode)
       (javascript-mode . js-ts-mode)
       (java-mode . java-ts-mode))))
#+end_src

The following snippet can be evaluated to install all langugage grammars seted above, it will not be tangled to the ~init.el~ file.

#+begin_src emacs-lisp :tangle no
  (mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist))
#+end_src

*** Expreg

[[https://elpa.gnu.org/packages/expreg.html][Expreg]] increases selected region by semantic units using tree-sitter.

#+begin_src emacs-lisp
(use-package expreg
    :ensure t
    :bind
    ("C-=" . expreg-expand)
    ("C-+" . expreg-contract))
#+end_src

** Indentation bars

[[https://github.com/jdtsmith/indent-bars][indent-bars]] provides indentation guide bars with tree-sitter support.

#+begin_src emacs-lisp
  (use-package indent-bars
    :ensure t
    :custom
    (indent-bars-treesit-support t)
    :hook
    ((python-ts-mode c-ts-mode c++-ts-mode html-ts-mode css-ts-mode js-ts-mode java-ts-mode) . indent-bars-mode))
#+end_src

** Emmet

[[https://github.com/smihica/emmet-mode][emmet-mode]] allows you to use emmet in emacs.

#+begin_src emacs-lisp
   (use-package emmet-mode
     :ensure t
     :hook
     (html-ts-mode . emmet-mode))
#+end_src

** "Rebind" ace-window in html-ts-mode

By default, in html buffers ~M-o~ is binded to ~font-lock-fontify-block~, change it.

#+begin_src emacs-lisp
  (use-package html-ts-mode
    :bind (
  	 :map html-ts-mode-map
  	      ("M-o" . ace-window)))
#+end_src

* Tempel

[[https://github.com/minad/tempel][TempEl]] is a tiny template system for emacs.

#+begin_src emacs-lisp
  (use-package tempel
    :ensure t
    :bind (
           :map tempel-map
                ("TAB" . tempel-next)
                ([tab] . tempel-next)
                ("S-TAB" . tempel-previous)
                ([backtab] . tempel-previous)
                ("M-RET" . tempel-done))
    :init
    (defun tempel-setup-capf ()
      (setq-local completion-at-point-functions
                  (cons #'tempel-expand
                        completion-at-point-functions)))
    
    (defun my/eglot-capf ()
      (setq-local completion-at-point-functions
                  (list (cape-capf-super
                         #'tempel-expand
                         #'eglot-completion-at-point
                         #'cape-file))))

    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'eglot-managed-mode-hook #'my/eglot-capf))
#+end_src

* vterm

[[https://github.com/akermu/emacs-libvterm][vterm]] is a fast and fully capable terminal emulator inside emacs.

Requirements:
- ~cmake~
- ~libtool~
- ~libvterm~

#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)
#+end_src

** multi vterm 

[[https://github.com/suonlight/multi-vterm][multi-vterm]] allows you to manage multiple vterm instances.

#+begin_src emacs-lisp
  (use-package multi-vterm
    :ensure t
    :custom
    (multi-vterm-dedicated-window-height-percent 30)
    :bind
    ("C-;" . multi-vterm-dedicated-toggle))
#+end_src

* sxhkdrc

#+begin_src emacs-lisp
  (use-package sxhkdrc-mode
    :ensure t
    :mode "sxhkdrc")
#+end_src
